name: main

on:
  push:
   branches:
   - master

permissions:
  contents: write  

jobs:
 build:
  runs-on: windows-latest

  steps:
   - name: Checkout
     uses: actions/checkout@v3

   - name: Setup .NET
     uses: actions/setup-dotnet@v3
     with:
      dotnet-version: 8.0.x

   - name: Install Maui Workload
     run: dotnet workload install maui

   - name: Restore
     run: dotnet restore
     working-directory: ./ABSHybrid

   - name: Build
     run: dotnet build -c Release -f:net8.0-windows10.0.19041.0
     working-directory: ./ABSHybrid

   - name: Decode Signing Certificate
     run: |
        echo "${{ secrets.SIGNING_CERTIFICATE_BASE_64_CONTENT }}" > cert.asc
        certutil -decode cert.asc cert.pfx

   - name: Sign
     run: certutil -user -p ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }} -Silent -importpfx cert.pfx NoRoot

   - name: Publish
     run: dotnet publish -c Release -f:net8.0-windows10.0.19041.0 /p:GenerateAppxPackageOnBuild=true /p:AppxPackageSigningEnabled=true /p:PackageCertificateThumbprint=${{ secrets.SIGNING_CERTIFICATE_THUMBPRINT }}
     working-directory: ./ABSHybrid

   - name: Extract Version and Find MSIX
     id: extractVersion
     shell: pwsh
     run: |
       $xml = [xml] (Get-Content ./ABSHybrid/ABSHybrid.csproj)
       [string] $version = $xml.Project.PropertyGroup.ApplicationDisplayVersion
       echo "version=$($version)" >> $env:GITHUB_OUTPUT
       
       # Find the actual MSIX file that was created
       $appPackagesPath = "./ABSHybrid/bin/Release/net8.0-windows10.0.19041.0/win10-x64/AppPackages/"
       $msixFile = Get-ChildItem $appPackagesPath -Recurse -Filter "*_x64.msix" | Select-Object -First 1
       
       if ($msixFile) {
         $actualFolder = $msixFile.Directory.Name
         $actualMsixName = $msixFile.Name
         $actualCerName = $actualMsixName -replace "\.msix$", ".cer"
         
         echo "actual-folder=$($actualFolder)" >> $env:GITHUB_OUTPUT
         echo "actual-msix=$($actualMsixName)" >> $env:GITHUB_OUTPUT
         echo "actual-cer=$($actualCerName)" >> $env:GITHUB_OUTPUT
         
         Write-Host "Found MSIX: $($msixFile.FullName)"
         Write-Host "Folder: $actualFolder"
         Write-Host "MSIX: $actualMsixName"
         Write-Host "CER: $actualCerName"
       } else {
         Write-Error "No MSIX file found"
         exit 1
       }

   - name: Create Tag
     uses: actions/github-script@v5
     with:
      github-token: ${{ secrets.GITHUB_TOKEN }}
      script: |
       github.rest.git.createRef({
         owner: context.repo.owner,
         repo: context.repo.repo,         
         sha: context.sha,
         ref: 'refs/tags/v${{ steps.extractVersion.outputs.version }}'
       })

   - name: Rename Auto-Update Installer
     shell: pwsh
     run: |
       $sourcePath = "./ABSHybrid/bin/Release/net8.0-windows10.0.19041.0/win10-x64/AppPackages/${{ steps.extractVersion.outputs.actual-folder }}/${{ steps.extractVersion.outputs.actual-msix }}"
       $targetPath = "./ABSHybrid/bin/Release/net8.0-windows10.0.19041.0/win10-x64/AppPackages/${{ steps.extractVersion.outputs.actual-folder }}/AutoUpdate.msix"
       
       Write-Host "Source path: $sourcePath"
       Write-Host "Target path: $targetPath"
       
       # Check if source file exists
       if (Test-Path $sourcePath) {
         Write-Host "Source file exists"
         # Use Copy-Item and Remove-Item instead of Rename-Item to avoid path issues
         Copy-Item $sourcePath $targetPath
         Remove-Item $sourcePath
         Write-Host "Successfully renamed to AutoUpdate.msix"
       } else {
         Write-Error "Source file does not exist: $sourcePath"
         # List what files are actually there
         $folder = "./ABSHybrid/bin/Release/net8.0-windows10.0.19041.0/win10-x64/AppPackages/${{ steps.extractVersion.outputs.actual-folder }}/"
         Write-Host "Files in folder:"
         Get-ChildItem $folder | ForEach-Object { Write-Host "  $_" }
         exit 1
       }

   - name: Rename Certificate
     shell: pwsh
     run: |
       $sourcePath = "./ABSHybrid/bin/Release/net8.0-windows10.0.19041.0/win10-x64/AppPackages/${{ steps.extractVersion.outputs.actual-folder }}/${{ steps.extractVersion.outputs.actual-cer }}"
       $targetPath = "./ABSHybrid/bin/Release/net8.0-windows10.0.19041.0/win10-x64/AppPackages/${{ steps.extractVersion.outputs.actual-folder }}/ABSHybrid.cer"
       
       Write-Host "Certificate source path: $sourcePath"
       Write-Host "Certificate target path: $targetPath"
       
       # Check if source file exists
       if (Test-Path $sourcePath) {
         Write-Host "Certificate source file exists"
         # Use Copy-Item and Remove-Item instead of Rename-Item to avoid path issues
         Copy-Item $sourcePath $targetPath
         Remove-Item $sourcePath
         Write-Host "Successfully renamed certificate to ABSHybrid.cer"
       } else {
         Write-Warning "Certificate file does not exist: $sourcePath"
         Write-Host "This might be normal if no certificate was generated"
       }
   
   - name: Create Release
     uses: softprops/action-gh-release@v2
     with:
       tag_name: v${{ steps.extractVersion.outputs.version }}
       files: |
        ./ABSHybrid/ABSHybrid.appinstaller
        ./ABSHybrid/bin/Release/net8.0-windows10.0.19041.0/win10-x64/AppPackages/${{ steps.extractVersion.outputs.actual-folder }}/AutoUpdate.msix
        ./ABSHybrid/bin/Release/net8.0-windows10.0.19041.0/win10-x64/AppPackages/${{ steps.extractVersion.outputs.actual-folder }}/ABSHybrid.cer